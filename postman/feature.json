{
  "info": {
    "_postman_id": "9cd63797-ef50-435f-9102-99bbc3e3cfb1",
    "name": "feature",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "40146760"
  },
  "item": [
    {
      "name": "Добавление нового комментария",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    try {\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        let eventBody = rnd.getEvent(category.id);\r",
              "        eventBody['requestModeration'] = true\r",
              "        let event = await api.addEvent(user.id, eventBody);\r",
              "        event = await api.publishEvent(event.id);\r",
              "        const submittedUser = await api.addUser(rnd.getUser());\r",
              "        pm.request.removeQueryParams(['eventId']);\r",
              "        pm.request.addQueryParams([`eventId=` + event.id]);\r",
              "        pm.collectionVariables.set('uid', submittedUser.id);\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            // выполняем наш скрипт\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);   \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const target = pm.response.json();\r",
              "var query = {};\r",
              "pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});\r",
              "\r",
              "pm.test(\"Запрос на участие должен содержать поля: id, requester, event, status, created\", function () {\r",
              "pm.expect(target).to.have.property('id');\r",
              "pm.expect(target).to.have.property('requester');\r",
              "pm.expect(target).to.have.property('event');\r",
              "pm.expect(target).to.have.property('status');\r",
              "pm.expect(target).to.have.property('created');\r",
              "});\r",
              "\r",
              "pm.test(\"При создании у запроса на участие должен быть статус PENDING\", function () {\r",
              "    pm.expect(target.status).equal(\"PENDING\");\r",
              "});\r",
              "\r",
              "pm.test(\"Id ивента в запросе и в ответе должны совпадать\", function () {\r",
              "    pm.expect(target.event.toString()).equal(query['eventId'].toString());\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/users/:userId/requests?eventId=0",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "requests"
          ],
          "query": [
            {
              "key": "eventId",
              "value": "0",
              "description": "(Required) id события"
            }
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{uid}}",
              "description": "(Required) id текущего пользователя"
            }
          ]
        },
        "description": "Обратите внимание:\n- нельзя добавить повторный запрос\n- инициатор события не может добавить запрос на участие в своём событии\n- нельзя участвовать в неопубликованном событии\n- если у события достигнут лимит запросов на участие - необходимо вернуть ошибку\n- если для события отключена пре-модерация запросов на участие, то запрос должен автоматически перейти в состояние подтвержденного"
      },
      "response": []
    },
    {
      "name": "Обновление комментария",
      "request": {
        "method": "GET",
        "header": []
      },
      "response": []
    },
    {
      "name": "Удаление комментария",
      "request": {
        "method": "GET",
        "header": []
      },
      "response": []
    },
    {
      "name": "Добавление жалобы на комментарий",
      "request": {
        "method": "GET",
        "header": []
      },
      "response": []
    },
    {
      "name": "Получение комментариев пользователя",
      "request": {
        "method": "GET",
        "header": []
      },
      "response": []
    },
    {
      "name": "Получение зарепорченых комментариев",
      "request": {
        "method": "GET",
        "header": []
      },
      "response": []
    },
    {
      "name": "Получение удаленных комментариев",
      "request": {
        "method": "GET",
        "header": []
      },
      "response": []
    },
    {
      "name": "Удаления комментария админом",
      "request": {
        "method": "GET",
        "header": []
      },
      "response": []
    },
    {
      "name": "Восстановление комментария",
      "request": {
        "method": "GET",
        "header": []
      },
      "response": []
    },
    {
      "name": "Получение комментариев события",
      "request": {
        "method": "GET",
        "header": []
      },
      "response": []
    },
    {
      "name": "Получение коммента по айди",
      "request": {
        "method": "GET",
        "header": []
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "API = class {",
          "    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
          "        this.baseUrl = baseUrl;",
          "        this.pm = postman;",
          "        this._verbose = verbose;",
          "    }",
          "",
          "    async addUser(user, verbose=null) {",
          "        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
          "    }",
          "",
          "    async addCategory(category, verbose=null) {",
          "        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
          "    }",
          "",
          "    async addEvent(userId, event, verbose=null) {",
          "        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
          "    }",
          "",
          "    async addCompilation(compilation, verbose=null) {",
          "        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
          "    }",
          "",
          "    async publishParticipationRequest(eventId, userId, verbose=null) {",
          "        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
          "    }",
          "",
          "    async publishEvent(eventId, verbose=null) {",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
          "    }",
          "    ",
          "    async rejectEvent(eventId, verbose=null) {",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
          "    }",
          "",
          "    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
          "        return this.patch('/users/' + userId + '/events/' + eventId + '/requests', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
          "    }",
          "",
          "    async findCategory(catId, verbose=null) {",
          "        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
          "    }",
          "",
          "    async findCompilation(compId, verbose=null) {",
          "        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
          "    }",
          "",
          "    async findEvent(eventId, verbose=null) {",
          "        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
          "    }",
          "",
          "    async findUser(userId, verbose=null) {",
          "        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
          "    }",
          "",
          "    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
          "    }",
          "    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
          "        return new Promise((resolve, reject) => {",
          "            verbose = verbose == null ? this._verbose : verbose;",
          "            const request = {",
          "                url: this.baseUrl + path,",
          "                method: method,",
          "                body: body == null ? \"\" : JSON.stringify(body),",
          "                header: { \"Content-Type\": \"application/json\" },",
          "            };",
          "            if(verbose) {",
          "                console.log(\"Отправляю запрос: \", request);",
          "            }",
          "",
          "            try {",
          "                this.pm.sendRequest(request, (error, response) => {",
          "                    if(error || (response.code >= 400 && response.code <= 599)) {",
          "                        let err = error ? error : JSON.stringify(response.json());",
          "                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
          "                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
          "                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
          "",
          "                        reject(new Error(errorText + err));",
          "                    }",
          "                    if(verbose) {",
          "                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
          "                    }",
          "                    if (response.stream.length === 0){",
          "                        reject(new Error('Отправлено пустое тело ответа'))",
          "                    }else{",
          "                        resolve(response.json());",
          "                    }",
          "                });",
          "                ",
          "            } catch(err) {",
          "                if(verbose) {",
          "                    console.error(errorText, err);",
          "                }",
          "                return Promise.reject(err);",
          "            }",
          "        });",
          "    }",
          "};",
          "",
          "RandomUtils = class {",
          "    constructor() {}",
          "",
          "    getUser() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomFullName}}'),",
          "            email: pm.variables.replaceIn('{{$randomEmail}}')",
          "        };",
          "    }",
          "",
          "    getCategory() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()",
          "        };",
          "    }",
          "",
          "    getEvent(categoryId) {",
          "        return {",
          "            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
          "            category: categoryId,",
          "            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
          "            eventDate: this.getFutureDateTime(),",
          "            location: {",
          "                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
          "                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
          "            },",
          "            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
          "            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
          "        }",
          "    }",
          "",
          "    getCompilation(...eventIds) {",
          "        return {",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
          "            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            events: eventIds",
          "        };",
          "    }",
          "",
          "",
          "    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
          "        let moment = require('moment');",
          "",
          "        let m = moment();",
          "        m.add(hourShift, 'hour');",
          "        m.add(minuteShift, 'minute');",
          "        m.add(yearShift, 'year');",
          "",
          "        return m.format('YYYY-MM-DD HH:mm:ss');",
          "    }",
          "",
          "    getWord(length = 1) {",
          "        let result = '';",
          "        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
          "        const charactersLength = characters.length;",
          "        let counter = 0;",
          "        while (counter < length) {",
          "            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
          "            counter += 1;",
          "        }",
          "        return result;",
          "    }",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "name",
      "value": ""
    },
    {
      "key": "usersCount",
      "value": 1,
      "type": "number"
    },
    {
      "key": "catid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "request_body",
      "value": ""
    },
    {
      "key": "mail",
      "value": ""
    },
    {
      "key": "response",
      "value": ""
    },
    {
      "key": "uid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "catname",
      "value": ""
    },
    {
      "key": "eid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "compid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "toCheck",
      "value": ""
    },
    {
      "key": "newDataToSet",
      "value": ""
    },
    {
      "key": "uid1",
      "value": ""
    },
    {
      "key": "reqid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "catId",
      "value": ""
    },
    {
      "key": "confirmedRequests",
      "value": ""
    },
    {
      "key": "responseArr",
      "value": ""
    },
    {
      "key": "source1",
      "value": ""
    },
    {
      "key": "source2",
      "value": ""
    },
    {
      "key": "fromId",
      "value": "0"
    },
    {
      "key": "source",
      "value": ""
    },
    {
      "key": "userId",
      "value": ""
    },
    {
      "key": "eventId",
      "value": ""
    },
    {
      "key": "submittedUserId",
      "value": ""
    },
    {
      "key": "commentUserId",
      "value": ""
    },
    {
      "key": "commentId",
      "value": ""
    }
  ]
}