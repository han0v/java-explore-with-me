{
  "info": {
    "_postman_id": "9cd63797-ef50-435f-9102-99bbc3e3cfb1",
    "name": "feature",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "40146760"
  },
  "item": [
    {
      "name": "Добавление нового комментария",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "RandomUtils = class {\r",
              "    constructor() {}\r",
              "    \r",
              "    getComment() {\r",
              "        return {\r",
              "            text: \"Test comment \" + Math.random().toString(36).substring(2, 10)\r",
              "        };\r",
              "    }\r",
              "    \r",
              "    getUser() {\r",
              "        return {\r",
              "            name: \"User \" + Math.random().toString(36).substring(2, 5),\r",
              "            email: `user${Math.random().toString(36).substring(2, 7)}@example.com`\r",
              "        };\r",
              "    }\r",
              "    \r",
              "    getCategory() {\r",
              "        return {\r",
              "            name: \"Category \" + Math.random().toString(36).substring(2, 7)\r",
              "        };\r",
              "    }\r",
              "    \r",
              "    getEvent(categoryId) {\r",
              "        return {\r",
              "            annotation: \"Test event annotation\",\r",
              "            category: categoryId,\r",
              "            description: \"Test event description\",\r",
              "            eventDate: new Date(Date.now() + 86400000).toISOString().replace('T', ' ').substring(0, 19),\r",
              "            location: { lat: 55.75, lon: 37.61 },\r",
              "            paid: false,\r",
              "            participantLimit: 0,\r",
              "            requestModeration: true,\r",
              "            title: \"Test Event\"\r",
              "        };\r",
              "    }\r",
              "};\r",
              "\r",
              "if (typeof (new RandomUtils()).getComment !== 'function') {\r",
              "    throw new Error(\"Метод getComment не определен в RandomUtils!\");\r",
              "}\r",
              "\r",
              "const main = async () => {\r",
              "    try {\r",
              "        const api = new API(pm);\r",
              "        const rnd = new RandomUtils();\r",
              "        \r",
              "        const user = rnd.getUser();\r",
              "        const createdUser = await api.post('/admin/users', user, \"Ошибка при создании пользователя\");\r",
              "        \r",
              "        const category = rnd.getCategory();\r",
              "        const createdCategory = await api.post('/admin/categories', category, \"Ошибка при создании категории\");\r",
              "        \r",
              "        const event = rnd.getEvent(createdCategory.id);\r",
              "        let createdEvent = await api.post(`/users/${createdUser.id}/events`, event, \"Ошибка при создании события\");\r",
              "        createdEvent = await api.publishEvent(createdEvent.id);\r",
              "        \r",
              "        const commentUser = rnd.getUser();\r",
              "        const createdCommentUser = await api.post('/admin/users', commentUser, \"Ошибка при создании пользователя для комментария\");\r",
              "        \r",
              "        pm.collectionVariables.set(\"userId\", createdCommentUser.id);\r",
              "        pm.collectionVariables.set(\"eventId\", createdEvent.id);\r",
              "        \r",
              "        const comment = rnd.getComment();\r",
              "        if (!comment || !comment.text) {\r",
              "            throw new Error(\"Не удалось сгенерировать комментарий\");\r",
              "        }\r",
              "        \r",
              "        pm.request.body.update({\r",
              "            mode: 'raw',\r",
              "            raw: JSON.stringify(comment),\r",
              "            options: { raw: { language: 'json' } }\r",
              "        });\r",
              "        \r",
              "        console.log(\"Pre-request выполнен успешно\");\r",
              "        \r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка в pre-request:\", err);\r",
              "        throw err;\r",
              "    }\r",
              "};\r",
              "\r",
              "(async () => {\r",
              "    const interval = setInterval(() => {}, 1000);\r",
              "    try {\r",
              "        await main();\r",
              "    } catch (e) {\r",
              "        console.error(\"Fatal error:\", e);\r",
              "        pm.request.body.update({\r",
              "            mode: 'raw',\r",
              "            raw: JSON.stringify({ text: \"Default comment text\" }),\r",
              "            options: { raw: { language: 'json' } }\r",
              "        });\r",
              "    } finally {\r",
              "        clearInterval(interval);\r",
              "    }\r",
              "})();"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);   \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/users/{{userId}}/events/{{eventId}}/comments",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "{{userId}}",
            "events",
            "{{eventId}}",
            "comments"
          ]
        },
        "description": "Обратите внимание:\n- нельзя добавить повторный запрос\n- инициатор события не может добавить запрос на участие в своём событии\n- нельзя участвовать в неопубликованном событии\n- если у события достигнут лимит запросов на участие - необходимо вернуть ошибку\n- если для события отключена пре-модерация запросов на участие, то запрос должен автоматически перейти в состояние подтвержденного"
      },
      "response": []
    },
    {
      "name": "Обновление комментария",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "RandomUtils = class {\r",
              "    constructor() {}\r",
              "    \r",
              "    getComment() {\r",
              "        return {\r",
              "            text: \"Original comment \" + Math.random().toString(36).substring(2, 10)\r",
              "        };\r",
              "    }\r",
              "    \r",
              "    getCommentUpdate() {\r",
              "        return {\r",
              "            text: \"Updated comment \" + Math.random().toString(36).substring(2, 10)\r",
              "        };\r",
              "    }\r",
              "    \r",
              "    getUser() {\r",
              "        return {\r",
              "            name: \"User \" + Math.random().toString(36).substring(2, 5),\r",
              "            email: `user${Math.random().toString(36).substring(2, 7)}@example.com`\r",
              "        };\r",
              "    }\r",
              "    \r",
              "    getCategory() {\r",
              "        return {\r",
              "            name: \"Category \" + Math.random().toString(36).substring(2, 7)\r",
              "        };\r",
              "    }\r",
              "    \r",
              "    getEvent(categoryId) {\r",
              "        return {\r",
              "            annotation: \"Test event annotation\",\r",
              "            category: categoryId,\r",
              "            description: \"Test event description\",\r",
              "            eventDate: new Date(Date.now() + 86400000).toISOString().replace('T', ' ').substring(0, 19),\r",
              "            location: { lat: 55.75, lon: 37.61 },\r",
              "            paid: false,\r",
              "            participantLimit: 0,\r",
              "            requestModeration: true,\r",
              "            title: \"Test Event\"\r",
              "        };\r",
              "    }\r",
              "};\r",
              "\r",
              "const main = async () => {\r",
              "    try {\r",
              "        const api = new API(pm);\r",
              "        const rnd = new RandomUtils();\r",
              "        \r",
              "        const user = rnd.getUser();\r",
              "        const createdUser = await api.post('/admin/users', user, \"Ошибка при создании пользователя\");\r",
              "        const userId = createdUser.id;\r",
              "        \r",
              "        const category = rnd.getCategory();\r",
              "        const createdCategory = await api.post('/admin/categories', category, \"Ошибка при создании категории\");\r",
              "        \r",
              "        const event = rnd.getEvent(createdCategory.id);\r",
              "        let createdEvent = await api.post(`/users/${userId}/events`, event, \"Ошибка при создании события\");\r",
              "        createdEvent = await api.publishEvent(createdEvent.id);\r",
              "        const eventId = createdEvent.id;\r",
              "        \r",
              "        const comment = rnd.getComment();\r",
              "        const createdComment = await api.post(\r",
              "            `/users/${userId}/events/${eventId}/comments`,\r",
              "            comment,\r",
              "            \"Ошибка при создании комментария\"\r",
              "        );\r",
              "        const commentId = createdComment.id;\r",
              "        \r",
              "        const commentUpdate = rnd.getCommentUpdate();\r",
              "        \r",
              "        const newUrl = `${pm.collectionVariables.get(\"baseUrl\")}/users/${userId}/events/${eventId}/comments/${commentId}`;\r",
              "        pm.request.url = newUrl;\r",
              "        \r",
              "        pm.request.body.update({\r",
              "            mode: 'raw',\r",
              "            raw: JSON.stringify(commentUpdate),\r",
              "            options: { raw: { language: 'json' } }\r",
              "        });\r",
              "        \r",
              "        console.log(\"URL запроса:\", newUrl);\r",
              "        console.log(\"Тело запроса:\", commentUpdate);\r",
              "        \r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка в pre-request:\", err);\r",
              "        throw err;\r",
              "    }\r",
              "};\r",
              "\r",
              "(async () => {\r",
              "    const interval = setInterval(() => {}, 1000);\r",
              "    try {\r",
              "        await main();\r",
              "    } catch (e) {\r",
              "        console.error(\"Fatal error:\", e);\r",
              "        pm.request.body.update({\r",
              "            mode: 'raw',\r",
              "            raw: JSON.stringify({ text: \"Default update text\" }),\r",
              "            options: { raw: { language: 'json' } }\r",
              "        });\r",
              "    } finally {\r",
              "        clearInterval(interval);\r",
              "    }\r",
              "})();"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);   \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/{{userId}}/events/{{eventId}}/comments/{{commentId}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "{{userId}}",
            "events",
            "{{eventId}}",
            "comments",
            "{{commentId}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Удаление комментария",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "\r",
              "RandomUtils = class {\r",
              "    constructor() {}\r",
              "    \r",
              "    getComment() {\r",
              "        return {\r",
              "            text: \"Test comment \" + Math.random().toString(36).substring(2, 10)\r",
              "        };\r",
              "    }\r",
              "    \r",
              "    getUser() {\r",
              "        return {\r",
              "            name: \"User \" + Math.random().toString(36).substring(2, 5),\r",
              "            email: `user${Math.random().toString(36).substring(2, 7)}@example.com`\r",
              "        };\r",
              "    }\r",
              "    \r",
              "    getCategory() {\r",
              "        return {\r",
              "            name: \"Category \" + Math.random().toString(36).substring(2, 7)\r",
              "        };\r",
              "    }\r",
              "    \r",
              "    getEvent(categoryId) {\r",
              "        return {\r",
              "            annotation: \"Test event annotation\",\r",
              "            category: categoryId,\r",
              "            description: \"Test event description\",\r",
              "            eventDate: new Date(Date.now() + 86400000).toISOString().replace('T', ' ').substring(0, 19),\r",
              "            location: { lat: 55.75, lon: 37.61 },\r",
              "            paid: false,\r",
              "            participantLimit: 0,\r",
              "            requestModeration: true,\r",
              "            title: \"Test Event\"\r",
              "        };\r",
              "    }\r",
              "};\r",
              "\r",
              "const main = async () => {\r",
              "    try {\r",
              "        const api = new API(pm);\r",
              "        const rnd = new RandomUtils();\r",
              "        \r",
              "        const user = rnd.getUser();\r",
              "        const createdUser = await api.post('/admin/users', user, \"Ошибка при создании пользователя\");\r",
              "        const userId = createdUser.id;\r",
              "        \r",
              "        const category = rnd.getCategory();\r",
              "        const createdCategory = await api.post('/admin/categories', category, \"Ошибка при создании категории\");\r",
              "        \r",
              "        const event = rnd.getEvent(createdCategory.id);\r",
              "        let createdEvent = await api.post(`/users/${userId}/events`, event, \"Ошибка при создании события\");\r",
              "        createdEvent = await api.publishEvent(createdEvent.id);\r",
              "        const eventId = createdEvent.id;\r",
              "        \r",
              "        const comment = rnd.getComment();\r",
              "        const createdComment = await api.post(\r",
              "            `/users/${userId}/events/${eventId}/comments`,\r",
              "            comment,\r",
              "            \"Ошибка при создании комментария\"\r",
              "        );\r",
              "        const commentId = createdComment.id;\r",
              "        \r",
              "        const newUrl = `${pm.collectionVariables.get(\"baseUrl\")}/users/${userId}/events/${eventId}/comments/${commentId}`;\r",
              "        pm.request.url = newUrl;\r",
              "        \r",
              "        pm.request.body.update({\r",
              "            mode: 'raw',\r",
              "            raw: '',\r",
              "            options: { raw: { language: 'json' } }\r",
              "        });\r",
              "        \r",
              "        console.log(\"DELETE URL:\", newUrl);\r",
              "        \r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка в pre-request:\", err);\r",
              "        throw err;\r",
              "    }\r",
              "};\r",
              "\r",
              "(async () => {\r",
              "    const interval = setInterval(() => {}, 1000);\r",
              "    try {\r",
              "        await main();\r",
              "    } catch (e) {\r",
              "        console.error(\"Fatal error:\", e);\r",
              "    } finally {\r",
              "        clearInterval(interval);\r",
              "    }\r",
              "})();"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
              "    pm.response.to.have.status(204);\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/{{userId}}/events/{{eventId}}/comments/{{commentId}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "{{userId}}",
            "events",
            "{{eventId}}",
            "comments",
            "{{commentId}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление жалобы на комментарий",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "RandomUtils = class {\r",
              "    constructor() {}\r",
              "    \r",
              "    getComment() {\r",
              "        return {\r",
              "            text: \"Test comment \" + Math.random().toString(36).substring(2, 10)\r",
              "        };\r",
              "    }\r",
              "    \r",
              "    getUser() {\r",
              "        return {\r",
              "            name: \"User \" + Math.random().toString(36).substring(2, 5),\r",
              "            email: `user${Math.random().toString(36).substring(2, 7)}@example.com`\r",
              "        };\r",
              "    }\r",
              "    \r",
              "    getCategory() {\r",
              "        return {\r",
              "            name: \"Category \" + Math.random().toString(36).substring(2, 7)\r",
              "        };\r",
              "    }\r",
              "    \r",
              "    getEvent(categoryId) {\r",
              "        return {\r",
              "            annotation: \"Test event annotation\",\r",
              "            category: categoryId,\r",
              "            description: \"Test event description\",\r",
              "            eventDate: new Date(Date.now() + 86400000).toISOString().replace('T', ' ').substring(0, 19),\r",
              "            location: { lat: 55.75, lon: 37.61 },\r",
              "            paid: false,\r",
              "            participantLimit: 0,\r",
              "            requestModeration: true,\r",
              "            title: \"Test Event\"\r",
              "        };\r",
              "    }\r",
              "    \r",
              "    getReport() {\r",
              "        return {\r",
              "            reason: \"Inappropriate content\"\r",
              "        };\r",
              "    }\r",
              "};\r",
              "\r",
              "const main = async () => {\r",
              "    try {\r",
              "        const api = new API(pm);\r",
              "        const rnd = new RandomUtils();\r",
              "        \r",
              "        const user = rnd.getUser();\r",
              "        const createdUser = await api.post('/admin/users', user, \"Ошибка при создании пользователя\");\r",
              "        const userId = createdUser.id;\r",
              "        \r",
              "        const anotherUser = rnd.getUser();\r",
              "        const createdAnotherUser = await api.post('/admin/users', anotherUser, \"Ошибка при создании второго пользователя\");\r",
              "        const anotherUserId = createdAnotherUser.id;\r",
              "        \r",
              "        const category = rnd.getCategory();\r",
              "        const createdCategory = await api.post('/admin/categories', category, \"Ошибка при создании категории\");\r",
              "        \r",
              "        const event = rnd.getEvent(createdCategory.id);\r",
              "        let createdEvent = await api.post(`/users/${userId}/events`, event, \"Ошибка при создании события\");\r",
              "        createdEvent = await api.publishEvent(createdEvent.id);\r",
              "        const eventId = createdEvent.id;\r",
              "        \r",
              "        const comment = rnd.getComment();\r",
              "        const createdComment = await api.post(\r",
              "            `/users/${userId}/events/${eventId}/comments`,\r",
              "            comment,\r",
              "            \"Ошибка при создании комментария\"\r",
              "        );\r",
              "        const commentId = createdComment.id;\r",
              "        \r",
              "        const report = rnd.getReport();\r",
              "        const reportUrl = `${pm.collectionVariables.get(\"baseUrl\")}/users/${anotherUserId}/events/${eventId}/comments/${commentId}/report`;\r",
              "        \r",
              "        pm.request.url = reportUrl;\r",
              "        \r",
              "        pm.request.body.update({\r",
              "            mode: 'raw',\r",
              "            raw: JSON.stringify(report),\r",
              "            options: { raw: { language: 'json' } }\r",
              "        });\r",
              "        \r",
              "        console.log(\"POST URL:\", reportUrl);\r",
              "        \r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка в pre-request:\", err);\r",
              "        throw err;\r",
              "    }\r",
              "};\r",
              "\r",
              "(async () => {\r",
              "    const interval = setInterval(() => {}, 1000);\r",
              "    try {\r",
              "        await main();\r",
              "    } catch (e) {\r",
              "        console.error(\"Fatal error:\", e);\r",
              "    } finally {\r",
              "        clearInterval(interval);\r",
              "    }\r",
              "})();\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201\", function () {\r",
              "    pm.response.to.have.status(201);   \r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/{{userId}}/events/{{eventId}}/comments/{{commentId}}/report",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "{{userId}}",
            "events",
            "{{eventId}}",
            "comments",
            "{{commentId}}",
            "report"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение комментариев пользователя",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "RandomUtils = class {\r",
              "    constructor() {}\r",
              "\r",
              "    getUser() {\r",
              "        return {\r",
              "            name: \"User \" + Math.random().toString(36).substring(2, 5),\r",
              "            email: `user${Math.random().toString(36).substring(2, 7)}@example.com`\r",
              "        };\r",
              "    }\r",
              "\r",
              "    getCategory() {\r",
              "        return {\r",
              "            name: \"Category \" + Math.random().toString(36).substring(2, 7)\r",
              "        };\r",
              "    }\r",
              "\r",
              "    getEvent(categoryId) {\r",
              "        return {\r",
              "            annotation: \"Test event annotation\",\r",
              "            category: categoryId,\r",
              "            description: \"Test event description\",\r",
              "            eventDate: new Date(Date.now() + 86400000).toISOString().replace('T', ' ').substring(0, 19),\r",
              "            location: { lat: 55.75, lon: 37.61 },\r",
              "            paid: false,\r",
              "            participantLimit: 0,\r",
              "            requestModeration: true,\r",
              "            title: \"Test Event\"\r",
              "        };\r",
              "    }\r",
              "\r",
              "    getComment() {\r",
              "        return {\r",
              "            text: \"Test comment \" + Math.random().toString(36).substring(2, 10)\r",
              "        };\r",
              "    }\r",
              "};\r",
              "\r",
              "const main = async () => {\r",
              "    try {\r",
              "        const api = new API(pm);\r",
              "        const rnd = new RandomUtils();\r",
              "        \r",
              "        const user = rnd.getUser();\r",
              "        const createdUser = await api.post('/admin/users', user, \"Ошибка при создании пользователя\");\r",
              "        const userId = createdUser.id;\r",
              "\r",
              "        const category = rnd.getCategory();\r",
              "        const createdCategory = await api.post('/admin/categories', category, \"Ошибка при создании категории\");\r",
              "        \r",
              "        const event = rnd.getEvent(createdCategory.id);\r",
              "        let createdEvent = await api.post(`/users/${userId}/events`, event, \"Ошибка при создании события\");\r",
              "        createdEvent = await api.publishEvent(createdEvent.id);\r",
              "        const eventId = createdEvent.id;\r",
              "\r",
              "        for (let i = 0; i < 5; i++) {\r",
              "            const comment = rnd.getComment();\r",
              "            await api.post(`/users/${userId}/events/${eventId}/comments`, comment, `Ошибка при создании комментария ${i + 1}`);\r",
              "        }\r",
              "\r",
              "        const url = `${pm.collectionVariables.get(\"baseUrl\")}/users/${userId}/events/${eventId}/comments`;\r",
              "\r",
              "        pm.request.url = url + \"?from=0&size=10\";\r",
              "        \r",
              "        console.log(\"GET URL:\", pm.request.url);\r",
              "        \r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка в pre-request:\", err);\r",
              "        throw err;\r",
              "    }\r",
              "};\r",
              "\r",
              "(async () => {\r",
              "    const interval = setInterval(() => {}, 1000);\r",
              "    try {\r",
              "        await main();\r",
              "    } catch (e) {\r",
              "        console.error(\"Fatal error:\", e);\r",
              "    } finally {\r",
              "        clearInterval(interval);\r",
              "    }\r",
              "})();\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.be.ok;    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/{{userId}}/events/{{eventId}}/comments",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            "{{userId}}",
            "events",
            "{{eventId}}",
            "comments"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение зарепорченых комментариев",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "RandomUtils = class {\r",
              "    constructor() {}\r",
              "\r",
              "    getUser() {\r",
              "        return {\r",
              "            name: \"User \" + Math.random().toString(36).substring(2, 5),\r",
              "            email: `user${Math.random().toString(36).substring(2, 7)}@example.com`\r",
              "        };\r",
              "    }\r",
              "\r",
              "    getCategory() {\r",
              "        return {\r",
              "            name: \"Category \" + Math.random().toString(36).substring(2, 7)\r",
              "        };\r",
              "    }\r",
              "\r",
              "    getEvent(categoryId) {\r",
              "        return {\r",
              "            annotation: \"Test event annotation\",\r",
              "            category: categoryId,\r",
              "            description: \"Test event description\",\r",
              "            eventDate: new Date(Date.now() + 86400000).toISOString().replace('T', ' ').substring(0, 19),\r",
              "            location: { lat: 55.75, lon: 37.61 },\r",
              "            paid: false,\r",
              "            participantLimit: 0,\r",
              "            requestModeration: true,\r",
              "            title: \"Test Event\"\r",
              "        };\r",
              "    }\r",
              "\r",
              "    getComment() {\r",
              "        return {\r",
              "            text: \"Test comment \" + Math.random().toString(36).substring(2, 10)\r",
              "        };\r",
              "    }\r",
              "\r",
              "    getReportReason() {\r",
              "        return {\r",
              "            reason: \"Inappropriate content\"\r",
              "        };\r",
              "    }\r",
              "};\r",
              "\r",
              "const main = async () => {\r",
              "    try {\r",
              "        const api = new API(pm);\r",
              "        const rnd = new RandomUtils();\r",
              "        \r",
              "        const user1 = rnd.getUser();\r",
              "        const createdUser1 = await api.post('/admin/users', user1, \"Ошибка при создании пользователя 1\");\r",
              "        const userId1 = createdUser1.id;\r",
              "\r",
              "        const user2 = rnd.getUser();\r",
              "        const createdUser2 = await api.post('/admin/users', user2, \"Ошибка при создании пользователя 2\");\r",
              "        const userId2 = createdUser2.id;\r",
              "\r",
              "        const category = rnd.getCategory();\r",
              "        const createdCategory = await api.post('/admin/categories', category, \"Ошибка при создании категории\");\r",
              "        \r",
              "        const event = rnd.getEvent(createdCategory.id);\r",
              "        let createdEvent = await api.post(`/users/${userId1}/events`, event, \"Ошибка при создании события\");\r",
              "        createdEvent = await api.publishEvent(createdEvent.id);\r",
              "        const eventId = createdEvent.id;\r",
              "\r",
              "        const comment1 = rnd.getComment();\r",
              "        const createdComment1 = await api.post(`/users/${userId1}/events/${eventId}/comments`, comment1, \"Ошибка при создании комментария от пользователя 1\");\r",
              "\r",
              "        const comment2 = rnd.getComment();\r",
              "        const createdComment2 = await api.post(`/users/${userId2}/events/${eventId}/comments`, comment2, \"Ошибка при создании комментария от пользователя 2\");\r",
              "\r",
              "        const report1 = rnd.getReportReason();\r",
              "        await api.post(`/users/${userId1}/events/${eventId}/comments/${createdComment2.id}/report`, report1, \"Ошибка при отправке отчета\");\r",
              "\r",
              "        const url = `${pm.collectionVariables.get(\"baseUrl\")}/admin/events/${eventId}/comments/reported`;\r",
              "        \r",
              "        pm.request.url = url + \"?from=0&size=10\";\r",
              "        \r",
              "        console.log(\"GET URL:\", pm.request.url);\r",
              "        \r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка в pre-request:\", err);\r",
              "        throw err;\r",
              "    }\r",
              "};\r",
              "\r",
              "(async () => {\r",
              "    const interval = setInterval(() => {}, 1000);\r",
              "    try {\r",
              "        await main();\r",
              "    } catch (e) {\r",
              "        console.error(\"Fatal error:\", e);\r",
              "    } finally {\r",
              "        clearInterval(interval);\r",
              "    }\r",
              "})();\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.be.ok;    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/events/{{eventId}}/comments/reported",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "events",
            "{{eventId}}",
            "comments",
            "reported"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение удаленных комментариев",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "class RandomUtils {\r",
              "    constructor() {}\r",
              "    \r",
              "    getComment() {\r",
              "        return {\r",
              "            text: \"Test comment \" + Math.random().toString(36).substring(2, 10)\r",
              "        };\r",
              "    }\r",
              "    \r",
              "    getUser() {\r",
              "        return {\r",
              "            name: \"User \" + Math.random().toString(36).substring(2, 5),\r",
              "            email: `user${Math.random().toString(36).substring(2, 7)}@example.com`\r",
              "        };\r",
              "    }\r",
              "    \r",
              "    getCategory() {\r",
              "        return {\r",
              "            name: \"Category \" + Math.random().toString(36).substring(2, 7)\r",
              "        };\r",
              "    }\r",
              "    \r",
              "    getEvent(categoryId) {\r",
              "        return {\r",
              "            annotation: \"Test event annotation\",\r",
              "            category: categoryId,\r",
              "            description: \"Test event description\",\r",
              "            eventDate: new Date(Date.now() + 86400000).toISOString().replace('T', ' ').substring(0, 19),\r",
              "            location: { lat: 55.75, lon: 37.61 },\r",
              "            paid: false,\r",
              "            participantLimit: 0,\r",
              "            requestModeration: true,\r",
              "            title: \"Test Event\"\r",
              "        };\r",
              "    }\r",
              "}\r",
              "\r",
              "class API {\r",
              "    constructor(postman, verbose = false, baseUrl = pm.collectionVariables.get(\"baseUrl\")) {\r",
              "        this.baseUrl = baseUrl || \"http://localhost:8080\";\r",
              "        this.pm = postman;\r",
              "        this._verbose = verbose;\r",
              "    }\r",
              "\r",
              "    async post(path, body, errorText = \"Ошибка при выполнении post-запроса\") {\r",
              "        return this.sendRequest(\"POST\", path, body, errorText);\r",
              "    }\r",
              "\r",
              "    async patch(path, body, errorText = \"Ошибка при выполнении patch-запроса\") {\r",
              "        return this.sendRequest(\"PATCH\", path, body, errorText);\r",
              "    }\r",
              "\r",
              "    async delete(path, errorText = \"Ошибка при выполнении delete-запроса\") {\r",
              "        return this.sendRequest(\"DELETE\", path, null, errorText);\r",
              "    }\r",
              "\r",
              "    async sendRequest(method, path, body, errorText) {\r",
              "        return new Promise((resolve, reject) => {\r",
              "            const request = {\r",
              "                url: this.baseUrl + path,\r",
              "                method: method,\r",
              "                header: { \"Content-Type\": \"application/json\" },\r",
              "                body: body ? { mode: 'raw', raw: JSON.stringify(body) } : undefined\r",
              "            };\r",
              "\r",
              "            this.pm.sendRequest(request, (err, response) => {\r",
              "                if (err || response.code >= 400) {\r",
              "                    const error = err || response.json();\r",
              "                    console.error(errorText, error);\r",
              "                    return reject(new Error(`${errorText}: ${JSON.stringify(error)}`));\r",
              "                }\r",
              "                // Обработка кодов состояния\r",
              "                if (response.code === 204) {\r",
              "                    resolve(null); // Успешное удаление, возвращаем null\r",
              "                } else {\r",
              "                    resolve(response.json()); // Парсим JSON для других ответов\r",
              "                }\r",
              "            });\r",
              "        });\r",
              "    }\r",
              "}\r",
              "\r",
              "const main = async () => {\r",
              "    try {\r",
              "        const api = new API(pm);\r",
              "        const rnd = new RandomUtils();\r",
              "        \r",
              "        const user = rnd.getUser();\r",
              "        const createdUser = await api.post('/admin/users', user, \"Ошибка при создании пользователя\");\r",
              "        \r",
              "        const category = rnd.getCategory();\r",
              "        const createdCategory = await api.post('/admin/categories', category, \"Ошибка при создании категории\");\r",
              "        \r",
              "        const event = rnd.getEvent(createdCategory.id);\r",
              "        let createdEvent = await api.post(`/users/${createdUser.id}/events`, event, \"Ошибка при создании события\");\r",
              "        \r",
              "        createdEvent = await api.patch(\r",
              "            `/admin/events/${createdEvent.id}`,\r",
              "            { stateAction: \"PUBLISH_EVENT\" },\r",
              "            \"Ошибка при публикации события\"\r",
              "        );\r",
              "        const eventId = createdEvent.id;\r",
              "        \r",
              "        const comment = rnd.getComment();\r",
              "        const createdComment = await api.post(\r",
              "            `/users/${createdUser.id}/events/${eventId}/comments`,\r",
              "            comment,\r",
              "            \"Ошибка при создании комментария\"\r",
              "        );\r",
              "        \r",
              "        await api.delete(\r",
              "            `/users/${createdUser.id}/events/${eventId}/comments/${createdComment.id}`,\r",
              "            \"Ошибка при удалении комментария\"\r",
              "        );\r",
              "\r",
              "        pm.collectionVariables.set(\"eventId\", eventId);\r",
              "        \r",
              "        const newUrl = `${pm.collectionVariables.get(\"baseUrl\")}/admin/events/${eventId}/comments/deleted?from=0&size=10`;\r",
              "        pm.request.url = newUrl;\r",
              "        \r",
              "        console.log(\"GET URL для удалённых комментариев:\", newUrl);\r",
              "        \r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка в pre-request:\", err);\r",
              "        throw err;\r",
              "    }\r",
              "};\r",
              "\r",
              "(async () => {\r",
              "    const interval = setInterval(() => {}, 1000);\r",
              "    try {\r",
              "        await main();\r",
              "    } catch (e) {\r",
              "        console.error(\"Fatal error:\", e);\r",
              "    } finally {\r",
              "        clearInterval(interval);\r",
              "    }\r",
              "})();\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.be.ok;    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/events/{{eventId}}/comments/deleted?from=0&size=10",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "events",
            "{{eventId}}",
            "comments",
            "deleted"
          ],
          "query": [
            {
              "key": "from",
              "value": "0"
            },
            {
              "key": "size",
              "value": "10"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Удаления комментария админом",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "RandomUtils = class {\r",
              "    constructor() {}\r",
              "    \r",
              "    getComment() {\r",
              "        return {\r",
              "            text: \"Test comment \" + Math.random().toString(36).substring(2, 10)\r",
              "        };\r",
              "    }\r",
              "    \r",
              "    getUser() {\r",
              "        return {\r",
              "            name: \"User \" + Math.random().toString(36).substring(2, 5),\r",
              "            email: `user${Math.random().toString(36).substring(2, 7)}@example.com`\r",
              "        };\r",
              "    }\r",
              "    \r",
              "    getCategory() {\r",
              "        return {\r",
              "            name: \"Category \" + Math.random().toString(36).substring(2, 7)\r",
              "        };\r",
              "    }\r",
              "    \r",
              "    getEvent(categoryId) {\r",
              "        return {\r",
              "            annotation: \"Test event annotation\",\r",
              "            category: categoryId,\r",
              "            description: \"Test event description\",\r",
              "            eventDate: new Date(Date.now() + 86400000).toISOString().replace('T', ' ').substring(0, 19),\r",
              "            location: { lat: 55.75, lon: 37.61 },\r",
              "            paid: false,\r",
              "            participantLimit: 0,\r",
              "            requestModeration: true,\r",
              "            title: \"Test Event\"\r",
              "        };\r",
              "    }\r",
              "};\r",
              "\r",
              "API = class {\r",
              "    constructor(postman, verbose = false, baseUrl = pm.collectionVariables.get(\"baseUrl\")) {\r",
              "        this.baseUrl = baseUrl || \"http://localhost:8080\";\r",
              "        this.pm = postman;\r",
              "        this._verbose = verbose;\r",
              "    }\r",
              "\r",
              "    async post(path, body, errorText = \"Ошибка при выполнении post-запроса\") {\r",
              "        return this.sendRequest(\"POST\", path, body, errorText);\r",
              "    }\r",
              "\r",
              "    async patch(path, body, errorText = \"Ошибка при выполнении patch-запроса\") {\r",
              "        return this.sendRequest(\"PATCH\", path, body, errorText);\r",
              "    }\r",
              "\r",
              "    async delete(path, errorText = \"Ошибка при выполнении delete-запроса\") {\r",
              "        return this.sendRequest(\"DELETE\", path, null, errorText);\r",
              "    }\r",
              "\r",
              "    async sendRequest(method, path, body, errorText) {\r",
              "        return new Promise((resolve, reject) => {\r",
              "            const request = {\r",
              "                url: this.baseUrl + path,\r",
              "                method: method,\r",
              "                header: { \"Content-Type\": \"application/json\" },\r",
              "                body: body ? { mode: 'raw', raw: JSON.stringify(body) } : undefined\r",
              "            };\r",
              "\r",
              "            this.pm.sendRequest(request, (err, response) => {\r",
              "                if (err || response.code >= 400) {\r",
              "                    const error = err || response.json();\r",
              "                    console.error(errorText, error);\r",
              "                    return reject(new Error(`${errorText}: ${JSON.stringify(error)}`));\r",
              "                }\r",
              "                resolve(response.json());\r",
              "            });\r",
              "        });\r",
              "    }\r",
              "};\r",
              "\r",
              "const main = async () => {\r",
              "    try {\r",
              "        const api = new API(pm);\r",
              "        const rnd = new RandomUtils();\r",
              "        \r",
              "        const user = rnd.getUser();\r",
              "        const createdUser = await api.post('/admin/users', user, \"Ошибка при создании пользователя\");\r",
              "        \r",
              "        const category = rnd.getCategory();\r",
              "        const createdCategory = await api.post('/admin/categories', category, \"Ошибка при создании категории\");\r",
              "        \r",
              "        const event = rnd.getEvent(createdCategory.id);\r",
              "        let createdEvent = await api.post(`/users/${createdUser.id}/events`, event, \"Ошибка при создании события\");\r",
              "        createdEvent = await api.patch(\r",
              "            `/admin/events/${createdEvent.id}`,\r",
              "            { stateAction: \"PUBLISH_EVENT\" },\r",
              "            \"Ошибка при публикации события\"\r",
              "        );\r",
              "        const eventId = createdEvent.id;\r",
              "        \r",
              "        const comment = rnd.getComment();\r",
              "        const createdComment = await api.post(\r",
              "            `/users/${createdUser.id}/events/${eventId}/comments`,\r",
              "            comment,\r",
              "            \"Ошибка при создании комментария\"\r",
              "        );\r",
              "        const commentId = createdComment.id;\r",
              "        \r",
              "        pm.collectionVariables.set(\"eventId\", eventId);\r",
              "        pm.collectionVariables.set(\"commentId\", commentId);\r",
              "        \r",
              "        const newUrl = `${pm.collectionVariables.get(\"baseUrl\")}/admin/events/${eventId}/comments/${commentId}`;\r",
              "        pm.request.url = newUrl;\r",
              "        \r",
              "        console.log(\"DELETE URL для админского удаления:\", newUrl);\r",
              "        \r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка в pre-request:\", err);\r",
              "        throw err;\r",
              "    }\r",
              "};\r",
              "\r",
              "(async () => {\r",
              "    const interval = setInterval(() => {}, 1000);\r",
              "    try {\r",
              "        await main();\r",
              "    } catch (e) {\r",
              "        console.error(\"Fatal error:\", e);\r",
              "    } finally {\r",
              "        clearInterval(interval);\r",
              "    }\r",
              "})();"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
              "    pm.response.to.have.status(204);\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/events/{{eventId}}/comments/{{commentId}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "events",
            "{{eventId}}",
            "comments",
            "{{commentId}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Восстановление комментария",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "RandomUtils = class {\r",
              "    constructor() {}\r",
              "    \r",
              "    getComment() {\r",
              "        return {\r",
              "            text: \"Test comment \" + Math.random().toString(36).substring(2, 10)\r",
              "        };\r",
              "    }\r",
              "    \r",
              "    getUser() {\r",
              "        return {\r",
              "            name: \"User \" + Math.random().toString(36).substring(2, 5),\r",
              "            email: `user${Math.random().toString(36).substring(2, 7)}@example.com`\r",
              "        };\r",
              "    }\r",
              "    \r",
              "    getCategory() {\r",
              "        return {\r",
              "            name: \"Category \" + Math.random().toString(36).substring(2, 7)\r",
              "        };\r",
              "    }\r",
              "    \r",
              "    getEvent(categoryId) {\r",
              "        return {\r",
              "            annotation: \"Test event annotation\",\r",
              "            category: categoryId,\r",
              "            description: \"Test event description\",\r",
              "            eventDate: new Date(Date.now() + 86400000).toISOString().replace('T', ' ').substring(0, 19),\r",
              "            location: { lat: 55.75, lon: 37.61 },\r",
              "            paid: false,\r",
              "            participantLimit: 0,\r",
              "            requestModeration: true,\r",
              "            title: \"Test Event\"\r",
              "        };\r",
              "    }\r",
              "};\r",
              "\r",
              "API = class {\r",
              "    constructor(postman, verbose = false, baseUrl = pm.collectionVariables.get(\"baseUrl\")) {\r",
              "        this.baseUrl = baseUrl || \"http://localhost:8080\";\r",
              "        this.pm = postman;\r",
              "        this._verbose = verbose;\r",
              "    }\r",
              "\r",
              "    async post(path, body, errorText = \"Ошибка при выполнении post-запроса\") {\r",
              "        return this.sendRequest(\"POST\", path, body, errorText);\r",
              "    }\r",
              "\r",
              "    async patch(path, body, errorText = \"Ошибка при выполнении patch-запроса\") {\r",
              "        return this.sendRequest(\"PATCH\", path, body, errorText);\r",
              "    }\r",
              "\r",
              "    async delete(path, errorText = \"Ошибка при выполнении delete-запроса\") {\r",
              "        return this.sendRequest(\"DELETE\", path, null, errorText);\r",
              "    }\r",
              "\r",
              "    async sendRequest(method, path, body, errorText) {\r",
              "        return new Promise((resolve, reject) => {\r",
              "            const request = {\r",
              "                url: this.baseUrl + path,\r",
              "                method: method,\r",
              "                header: { \"Content-Type\": \"application/json\" },\r",
              "                body: body ? { mode: 'raw', raw: JSON.stringify(body) } : undefined\r",
              "            };\r",
              "\r",
              "            this.pm.sendRequest(request, (err, response) => {\r",
              "                if (err || response.code >= 400) {\r",
              "                    const error = err || response.json();\r",
              "                    console.error(errorText, error);\r",
              "                    return reject(new Error(`${errorText}: ${JSON.stringify(error)}`));\r",
              "                }\r",
              "                resolve(response.json());\r",
              "            });\r",
              "        });\r",
              "    }\r",
              "};\r",
              "\r",
              "const main = async () => {\r",
              "    try {\r",
              "        const api = new API(pm);\r",
              "        const rnd = new RandomUtils();\r",
              "        \r",
              "        const user = rnd.getUser();\r",
              "        const createdUser = await api.post('/admin/users', user, \"Ошибка при создании пользователя\");\r",
              "        \r",
              "        const category = rnd.getCategory();\r",
              "        const createdCategory = await api.post('/admin/categories', category, \"Ошибка при создании категории\");\r",
              "        \r",
              "        const event = rnd.getEvent(createdCategory.id);\r",
              "        let createdEvent = await api.post(`/users/${createdUser.id}/events`, event, \"Ошибка при создании события\");\r",
              "        createdEvent = await api.patch(\r",
              "            `/admin/events/${createdEvent.id}`,\r",
              "            { stateAction: \"PUBLISH_EVENT\" },\r",
              "            \"Ошибка при публикации события\"\r",
              "        );\r",
              "        const eventId = createdEvent.id;\r",
              "        \r",
              "        const comment = rnd.getComment();\r",
              "        const createdComment = await api.post(\r",
              "            `/users/${createdUser.id}/events/${eventId}/comments`,\r",
              "            comment,\r",
              "            \"Ошибка при создании комментария\"\r",
              "        );\r",
              "        const commentId = createdComment.id;\r",
              "        \r",
              "        await api.delete(\r",
              "            `/admin/events/${eventId}/comments/${commentId}`,\r",
              "            \"Ошибка при удалении комментария\"\r",
              "        );\r",
              "        \r",
              "        pm.collectionVariables.set(\"eventId\", eventId);\r",
              "        pm.collectionVariables.set(\"commentId\", commentId);\r",
              "        \r",
              "        const newUrl = `${pm.collectionVariables.get(\"baseUrl\")}/admin/events/${eventId}/comments/${commentId}/restore`;\r",
              "        pm.request.url = newUrl;\r",
              "        \r",
              "        console.log(\"PATCH URL для восстановления комментария:\", newUrl);\r",
              "        \r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка в pre-request:\", err);\r",
              "        throw err;\r",
              "    }\r",
              "};\r",
              "\r",
              "(async () => {\r",
              "    const interval = setInterval(() => {}, 1000);\r",
              "    try {\r",
              "        await main();\r",
              "    } catch (e) {\r",
              "        console.error(\"Fatal error:\", e);\r",
              "    } finally {\r",
              "        clearInterval(interval);\r",
              "    }\r",
              "})();"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.be.ok;    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/events/{{eventId}}/comments/{{commentId}}/restore",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "events",
            "{{eventId}}",
            "comments",
            "{{commentId}}",
            "restore"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение комментариев события",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// ====== 1. Определяем RandomUtils и API ======\r",
              "RandomUtils = class {\r",
              "    constructor() {}\r",
              "    \r",
              "    getComment() {\r",
              "        return {\r",
              "            text: \"Test comment \" + Math.random().toString(36).substring(2, 10)\r",
              "        };\r",
              "    }\r",
              "    \r",
              "    getUser() {\r",
              "        return {\r",
              "            name: \"User \" + Math.random().toString(36).substring(2, 5),\r",
              "            email: `user${Math.random().toString(36).substring(2, 7)}@example.com`\r",
              "        };\r",
              "    }\r",
              "    \r",
              "    getCategory() {\r",
              "        return {\r",
              "            name: \"Category \" + Math.random().toString(36).substring(2, 7)\r",
              "        };\r",
              "    }\r",
              "    \r",
              "    getEvent(categoryId) {\r",
              "        return {\r",
              "            annotation: \"Test event annotation\",\r",
              "            category: categoryId,\r",
              "            description: \"Test event description\",\r",
              "            eventDate: new Date(Date.now() + 86400000).toISOString().replace('T', ' ').substring(0, 19),\r",
              "            location: { lat: 55.75, lon: 37.61 },\r",
              "            paid: false,\r",
              "            participantLimit: 0,\r",
              "            requestModeration: true,\r",
              "            title: \"Test Event\"\r",
              "        };\r",
              "    }\r",
              "};\r",
              "\r",
              "API = class {\r",
              "    constructor(postman, verbose = false, baseUrl = pm.collectionVariables.get(\"baseUrl\")) {\r",
              "        this.baseUrl = baseUrl || \"http://localhost:8080\";\r",
              "        this.pm = postman;\r",
              "        this._verbose = verbose;\r",
              "    }\r",
              "\r",
              "    async post(path, body, errorText = \"Ошибка при выполнении post-запроса\") {\r",
              "        return this.sendRequest(\"POST\", path, body, errorText);\r",
              "    }\r",
              "\r",
              "    async patch(path, body, errorText = \"Ошибка при выполнении patch-запроса\") {\r",
              "        return this.sendRequest(\"PATCH\", path, body, errorText);\r",
              "    }\r",
              "\r",
              "    async sendRequest(method, path, body, errorText) {\r",
              "        return new Promise((resolve, reject) => {\r",
              "            const request = {\r",
              "                url: this.baseUrl + path,\r",
              "                method: method,\r",
              "                header: { \"Content-Type\": \"application/json\" },\r",
              "                body: body ? { mode: 'raw', raw: JSON.stringify(body) } : undefined\r",
              "            };\r",
              "\r",
              "            this.pm.sendRequest(request, (err, response) => {\r",
              "                if (err || response.code >= 400) {\r",
              "                    const error = err || response.json();\r",
              "                    console.error(errorText, error);\r",
              "                    return reject(new Error(`${errorText}: ${JSON.stringify(error)}`));\r",
              "                }\r",
              "                resolve(response.json());\r",
              "            });\r",
              "        });\r",
              "    }\r",
              "};\r",
              "\r",
              "// ====== 2. Основной код ======\r",
              "const main = async () => {\r",
              "    try {\r",
              "        const api = new API(pm);\r",
              "        const rnd = new RandomUtils();\r",
              "        \r",
              "        const user = rnd.getUser();\r",
              "        const createdUser = await api.post('/admin/users', user, \"Ошибка при создании пользователя\");\r",
              "        \r",
              "        const category = rnd.getCategory();\r",
              "        const createdCategory = await api.post('/admin/categories', category, \"Ошибка при создании категории\");\r",
              "        \r",
              "        const event = rnd.getEvent(createdCategory.id);\r",
              "        let createdEvent = await api.post(`/users/${createdUser.id}/events`, event, \"Ошибка при создании события\");\r",
              "        createdEvent = await api.patch(\r",
              "            `/admin/events/${createdEvent.id}`,\r",
              "            { stateAction: \"PUBLISH_EVENT\" },\r",
              "            \"Ошибка при публикации события\"\r",
              "        );\r",
              "        const eventId = createdEvent.id;\r",
              "        \r",
              "        for (let i = 0; i < 3; i++) {\r",
              "            const comment = rnd.getComment();\r",
              "            await api.post(\r",
              "                `/users/${createdUser.id}/events/${eventId}/comments`,\r",
              "                comment,\r",
              "                \"Ошибка при создании комментария\"\r",
              "            );\r",
              "        }\r",
              "        \r",
              "        pm.collectionVariables.set(\"eventId\", eventId);\r",
              "        \r",
              "        const newUrl = `${pm.collectionVariables.get(\"baseUrl\")}/events/${eventId}/comments?from=0&size=10`;\r",
              "        pm.request.url = newUrl;\r",
              "        \r",
              "        console.log(\"GET URL для получения комментариев:\", newUrl);\r",
              "        \r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка в pre-request:\", err);\r",
              "        throw err;\r",
              "    }\r",
              "};\r",
              "\r",
              "(async () => {\r",
              "    const interval = setInterval(() => {}, 1000);\r",
              "    try {\r",
              "        await main();\r",
              "    } catch (e) {\r",
              "        console.error(\"Fatal error:\", e);\r",
              "    } finally {\r",
              "        clearInterval(interval);\r",
              "    }\r",
              "})();"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.be.ok;    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/events/{{eventId}}/comments",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "events",
            "{{eventId}}",
            "comments"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение коммента по айди",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "RandomUtils = class {\r",
              "    getComment() {\r",
              "        return {\r",
              "            text: \"Test comment \" + Math.random().toString(36).substring(2, 10)\r",
              "        };\r",
              "    }\r",
              "\r",
              "    getUser() {\r",
              "        return {\r",
              "            name: \"User \" + Math.random().toString(36).substring(2, 5),\r",
              "            email: `user${Math.random().toString(36).substring(2, 7)}@example.com`\r",
              "        };\r",
              "    }\r",
              "\r",
              "    getCategory() {\r",
              "        return {\r",
              "            name: \"Category \" + Math.random().toString(36).substring(2, 7)\r",
              "        };\r",
              "    }\r",
              "\r",
              "    getEvent(categoryId) {\r",
              "        return {\r",
              "            annotation: \"Test event annotation\",\r",
              "            category: categoryId,\r",
              "            description: \"Test event description\",\r",
              "            eventDate: new Date(Date.now() + 86400000).toISOString().replace('T', ' ').substring(0, 19),\r",
              "            location: { lat: 55.75, lon: 37.61 },\r",
              "            paid: false,\r",
              "            participantLimit: 0,\r",
              "            requestModeration: true,\r",
              "            title: \"Test Event\"\r",
              "        };\r",
              "    }\r",
              "};\r",
              "\r",
              "API = class {\r",
              "    constructor(postman, verbose = false, baseUrl = pm.collectionVariables.get(\"baseUrl\")) {\r",
              "        this.baseUrl = baseUrl || \"http://localhost:8080\";\r",
              "        this.pm = postman;\r",
              "        this._verbose = verbose;\r",
              "    }\r",
              "\r",
              "    async post(path, body, errorText = \"Ошибка при POST\") {\r",
              "        return this.sendRequest(\"POST\", path, body, errorText);\r",
              "    }\r",
              "\r",
              "    async patch(path, body, errorText = \"Ошибка при PATCH\") {\r",
              "        return this.sendRequest(\"PATCH\", path, body, errorText);\r",
              "    }\r",
              "\r",
              "    async sendRequest(method, path, body, errorText) {\r",
              "        return new Promise((resolve, reject) => {\r",
              "            const request = {\r",
              "                url: this.baseUrl + path,\r",
              "                method: method,\r",
              "                header: { \"Content-Type\": \"application/json\" },\r",
              "                body: body ? { mode: 'raw', raw: JSON.stringify(body) } : undefined\r",
              "            };\r",
              "\r",
              "            this.pm.sendRequest(request, (err, response) => {\r",
              "                if (err || response.code >= 400) {\r",
              "                    const error = err || response.json();\r",
              "                    console.error(errorText, error);\r",
              "                    return reject(new Error(`${errorText}: ${JSON.stringify(error)}`));\r",
              "                }\r",
              "                resolve(response.json());\r",
              "            });\r",
              "        });\r",
              "    }\r",
              "};\r",
              "\r",
              "const main = async () => {\r",
              "    try {\r",
              "        const api = new API(pm);\r",
              "        const rnd = new RandomUtils();\r",
              "\r",
              "        const user = await api.post(\"/admin/users\", rnd.getUser(), \"Ошибка при создании пользователя\");\r",
              "\r",
              "        const category = await api.post(\"/admin/categories\", rnd.getCategory(), \"Ошибка при создании категории\");\r",
              "\r",
              "        let event = await api.post(`/users/${user.id}/events`, rnd.getEvent(category.id), \"Ошибка при создании события\");\r",
              "        event = await api.patch(`/admin/events/${event.id}`, { stateAction: \"PUBLISH_EVENT\" }, \"Ошибка при публикации\");\r",
              "\r",
              "        const comment = await api.post(\r",
              "            `/users/${user.id}/events/${event.id}/comments`,\r",
              "            rnd.getComment(),\r",
              "            \"Ошибка при создании комментария\"\r",
              "        );\r",
              "        pm.collectionVariables.set(\"eventId\", event.id);\r",
              "        pm.collectionVariables.set(\"commentId\", comment.id);\r",
              "\r",
              "        const newUrl = `${pm.collectionVariables.get(\"baseUrl\")}/events/${event.id}/comments/${comment.id}`;\r",
              "        pm.request.url = newUrl;\r",
              "        console.log(\"GET URL для получения комментария по ID:\", newUrl);\r",
              "\r",
              "    } catch (e) {\r",
              "        console.error(\"Ошибка в pre-request:\", e);\r",
              "        throw e;\r",
              "    }\r",
              "};\r",
              "\r",
              "(async () => {\r",
              "    const interval = setInterval(() => {}, 1000);\r",
              "    try {\r",
              "        await main();\r",
              "    } catch (e) {\r",
              "        console.error(\"Fatal error:\", e);\r",
              "    } finally {\r",
              "        clearInterval(interval);\r",
              "    }\r",
              "})();\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.be.ok;    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/events/{{eventId}}/comments/{{commentId}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "events",
            "{{eventId}}",
            "comments",
            "{{commentId}}"
          ]
        }
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "API = class {",
          "    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
          "        this.baseUrl = baseUrl;",
          "        this.pm = postman;",
          "        this._verbose = verbose;",
          "    }",
          "",
          "    async addUser(user, verbose=null) {",
          "        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
          "    }",
          "",
          "    async addCategory(category, verbose=null) {",
          "        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
          "    }",
          "",
          "    async addEvent(userId, event, verbose=null) {",
          "        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
          "    }",
          "",
          "    async addCompilation(compilation, verbose=null) {",
          "        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
          "    }",
          "",
          "    async publishParticipationRequest(eventId, userId, verbose=null) {",
          "        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
          "    }",
          "",
          "    async publishEvent(eventId, verbose=null) {",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
          "    }",
          "    ",
          "    async rejectEvent(eventId, verbose=null) {",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
          "    }",
          "",
          "    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
          "        return this.patch('/users/' + userId + '/events/' + eventId + '/requests', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
          "    }",
          "",
          "    async findCategory(catId, verbose=null) {",
          "        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
          "    }",
          "",
          "    async findCompilation(compId, verbose=null) {",
          "        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
          "    }",
          "",
          "    async findEvent(eventId, verbose=null) {",
          "        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
          "    }",
          "",
          "    async findUser(userId, verbose=null) {",
          "        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
          "    }",
          "",
          "    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
          "    }",
          "    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
          "        return new Promise((resolve, reject) => {",
          "            verbose = verbose == null ? this._verbose : verbose;",
          "            const request = {",
          "                url: this.baseUrl + path,",
          "                method: method,",
          "                body: body == null ? \"\" : JSON.stringify(body),",
          "                header: { \"Content-Type\": \"application/json\" },",
          "            };",
          "            if(verbose) {",
          "                console.log(\"Отправляю запрос: \", request);",
          "            }",
          "",
          "            try {",
          "                this.pm.sendRequest(request, (error, response) => {",
          "                    if(error || (response.code >= 400 && response.code <= 599)) {",
          "                        let err = error ? error : JSON.stringify(response.json());",
          "                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
          "                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
          "                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
          "",
          "                        reject(new Error(errorText + err));",
          "                    }",
          "                    if(verbose) {",
          "                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
          "                    }",
          "                    if (response.stream.length === 0){",
          "                        reject(new Error('Отправлено пустое тело ответа'))",
          "                    }else{",
          "                        resolve(response.json());",
          "                    }",
          "                });",
          "                ",
          "            } catch(err) {",
          "                if(verbose) {",
          "                    console.error(errorText, err);",
          "                }",
          "                return Promise.reject(err);",
          "            }",
          "        });",
          "    }",
          "};",
          "",
          "RandomUtils = class {",
          "    constructor() {}",
          "",
          "    getUser() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomFullName}}'),",
          "            email: pm.variables.replaceIn('{{$randomEmail}}')",
          "        };",
          "    }",
          "",
          "    getCategory() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()",
          "        };",
          "    }",
          "",
          "    getEvent(categoryId) {",
          "        return {",
          "            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
          "            category: categoryId,",
          "            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
          "            eventDate: this.getFutureDateTime(),",
          "            location: {",
          "                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
          "                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
          "            },",
          "            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
          "            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
          "        }",
          "    }",
          "",
          "    getCompilation(...eventIds) {",
          "        return {",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
          "            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            events: eventIds",
          "        };",
          "    }",
          "",
          "",
          "    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
          "        let moment = require('moment');",
          "",
          "        let m = moment();",
          "        m.add(hourShift, 'hour');",
          "        m.add(minuteShift, 'minute');",
          "        m.add(yearShift, 'year');",
          "",
          "        return m.format('YYYY-MM-DD HH:mm:ss');",
          "    }",
          "",
          "    getWord(length = 1) {",
          "        let result = '';",
          "        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
          "        const charactersLength = characters.length;",
          "        let counter = 0;",
          "        while (counter < length) {",
          "            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
          "            counter += 1;",
          "        }",
          "        return result;",
          "    }",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "name",
      "value": ""
    },
    {
      "key": "usersCount",
      "value": 1,
      "type": "number"
    },
    {
      "key": "catid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "request_body",
      "value": ""
    },
    {
      "key": "mail",
      "value": ""
    },
    {
      "key": "response",
      "value": ""
    },
    {
      "key": "uid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "catname",
      "value": ""
    },
    {
      "key": "eid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "compid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "toCheck",
      "value": ""
    },
    {
      "key": "newDataToSet",
      "value": ""
    },
    {
      "key": "uid1",
      "value": ""
    },
    {
      "key": "reqid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "catId",
      "value": ""
    },
    {
      "key": "confirmedRequests",
      "value": ""
    },
    {
      "key": "responseArr",
      "value": ""
    },
    {
      "key": "source1",
      "value": ""
    },
    {
      "key": "source2",
      "value": ""
    },
    {
      "key": "fromId",
      "value": "0"
    },
    {
      "key": "source",
      "value": ""
    },
    {
      "key": "userId",
      "value": ""
    },
    {
      "key": "eventId",
      "value": ""
    },
    {
      "key": "submittedUserId",
      "value": ""
    },
    {
      "key": "commentUserId",
      "value": ""
    },
    {
      "key": "commentId",
      "value": ""
    }
  ]
}